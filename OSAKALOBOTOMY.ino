// -------------------------------------------------
// Copyright (c) 2022 HiBit <https://www.hibit.dev>
// -------------------------------------------------

#include "pitches.h"

#define BUZZER_PIN 11

int melody[] = {
  NOTE_E6, NOTE_C6, NOTE_A5, 0,
  NOTE_C6, NOTE_A5, NOTE_F5, 0,
  NOTE_A5, NOTE_F5, NOTE_D5, 0,
  NOTE_F5, NOTE_D5, NOTE_E5, 0,
  NOTE_D5, NOTE_C5, NOTE_A4, 0,
  NOTE_C5, NOTE_A4, NOTE_F4, 0,0,
  NOTE_G5,
  NOTE_E5,0,NOTE_G5,NOTE_E5,0,NOTE_G5,
  NOTE_E5,NOTE_G5,NOTE_A5,NOTE_B5,NOTE_C6,NOTE_B5,NOTE_A5,NOTE_G5,
  ///LINEA 5 DE LA PARTITURA
  NOTE_F5,0,NOTE_GS5,NOTE_F5,0,NOTE_DS6,
  NOTE_DS6,NOTE_D6,NOTE_C6,NOTE_AS5,NOTE_GS5,NOTE_G5,NOTE_F5,
  NOTE_E5,0,NOTE_G5,NOTE_E5,0,NOTE_G5,
  NOTE_E5,NOTE_G5,NOTE_A5,NOTE_B5,NOTE_C6,NOTE_B5,NOTE_A5,NOTE_G5,
  NOTE_F5,0,NOTE_GS5,NOTE_F5,0,NOTE_DS6,
  //////LINEA 10 DE LA PARTITURA :3
  NOTE_DS6,NOTE_D6,NOTE_C6,NOTE_AS5,NOTE_GS5,NOTE_G5,NOTE_B5,
  NOTE_C6,NOTE_AS5,NOTE_C6,NOTE_D6,NOTE_C6,NOTE_B5,NOTE_GS5,NOTE_G5,
  NOTE_F5,NOTE_G5,NOTE_A5,NOTE_G5,NOTE_F5,NOTE_G5,0,
  NOTE_C6,NOTE_AS5,NOTE_C6,NOTE_D6,NOTE_C6,NOTE_B5,NOTE_GS5,NOTE_B5,
  ////LINEA 14
  NOTE_C6,NOTE_G5,NOTE_F5,NOTE_E5,
  NOTE_D5,NOTE_D5,NOTE_D5,NOTE_E5,0,NOTE_E5,
  NOTE_F5,NOTE_F5,NOTE_F5,NOTE_AS5,NOTE_GS5,NOTE_B5,
  NOTE_G5,0,NOTE_A5,0,
  NOTE_B5,NOTE_C6,NOTE_D6,NOTE_C6,NOTE_B5,
  NOTE_E5,0,NOTE_G5,NOTE_E5,0,NOTE_G5,
  ///LINEA 20
  NOTE_E5,NOTE_G5,NOTE_A5,NOTE_B5,NOTE_C6,NOTE_B5,NOTE_A5,NOTE_G5,
  NOTE_F5,0,NOTE_GS5,NOTE_F5,0,NOTE_DS6,
  NOTE_DS6,NOTE_D6,NOTE_C6,NOTE_AS5,NOTE_GS5,NOTE_G5,NOTE_G5,
  NOTE_E5,0,NOTE_G5,NOTE_E5,0,NOTE_G5,
  NOTE_E5,NOTE_G5,NOTE_A5,NOTE_B5,NOTE_C6,NOTE_B5,NOTE_A5,NOTE_G5,
  ///LINEA 25
  NOTE_F5,0,NOTE_GS5,NOTE_F5,0,NOTE_DS6,
  NOTE_DS6,NOTE_D6,NOTE_C6,NOTE_AS5,NOTE_GS5,NOTE_B5,
  NOTE_C6,NOTE_AS5,NOTE_C6,NOTE_D6,NOTE_C6,NOTE_B5,NOTE_GS5,NOTE_G5,
  NOTE_F5,NOTE_G5,NOTE_A5,NOTE_G5,NOTE_F5,NOTE_G5,0,
  ///LINEA 29
  NOTE_C6,NOTE_AS5,NOTE_C6,NOTE_D6,NOTE_C6,NOTE_B5,NOTE_GS5,NOTE_B5,
  NOTE_C6,NOTE_G5,NOTE_F5,NOTE_E5,
  NOTE_D5,NOTE_D5,NOTE_D5,NOTE_E5,0,NOTE_E5,
  NOTE_F5,NOTE_F5,NOTE_F5,NOTE_AS5,NOTE_GS5,NOTE_B5,
  NOTE_G5,0,NOTE_A5,0,
  //LINEA 34
  NOTE_B5,NOTE_C6,NOTE_D6,NOTE_C6,NOTE_B5,
  NOTE_C6,NOTE_A5,NOTE_C6,NOTE_E6,NOTE_D6,NOTE_C6,NOTE_G5,NOTE_F5,NOTE_E5,NOTE_D5,NOTE_E5,
  NOTE_C6,NOTE_G5,NOTE_C6,NOTE_E6,NOTE_D6,NOTE_C6,NOTE_G5,NOTE_F5,NOTE_E5,NOTE_D5,NOTE_E5,
  ///LINEA 37
  NOTE_C6,NOTE_F5,NOTE_C6,NOTE_E6,NOTE_D6,NOTE_C6,NOTE_G5,NOTE_F5,NOTE_E5,NOTE_D5,NOTE_E5,
  NOTE_F5,NOTE_A5,NOTE_GS5,NOTE_AS5,NOTE_A5,NOTE_B5,NOTE_C6,NOTE_D6,
  NOTE_C6,NOTE_G5,NOTE_C6,NOTE_E6,NOTE_D6,NOTE_C6,NOTE_G5,NOTE_F5,NOTE_E5,NOTE_D5,NOTE_E5,
  ///LINEA 40
  NOTE_C6,NOTE_F5,NOTE_C6,NOTE_E6,NOTE_D6,NOTE_C6,NOTE_G5,NOTE_F5,NOTE_E5,NOTE_D5,NOTE_E5,
  NOTE_C6,NOTE_GS5,NOTE_C6,NOTE_DS6,NOTE_D6,NOTE_C6,NOTE_G5,NOTE_F5,NOTE_DS5,NOTE_D5,
  ///LINEA 43
  NOTE_DS5,NOTE_F5,NOTE_G5,NOTE_GS5,NOTE_G5,NOTE_AS5,NOTE_B5,NOTE_C6,
  NOTE_C6,NOTE_D6,NOTE_C6,NOTE_D6,
  NOTE_C6,NOTE_D6,NOTE_C6,NOTE_D6,
  NOTE_C6,NOTE_D6,NOTE_C6,0
};

int durations[] = {
  16, 16, 8, 16,
  16, 16, 8, 16,
  16, 16, 8, 16,
  16, 16, 8, 16,
  16, 16, 8, 16,
  16, 16, 4, 16,8,
  4,
  4,8,8,4,8,8,
  8,8,8,8,8,8,8,8,
  ///LINEA 5 DE LA PARTITURA
  4,8,8,4,8,8,
  8,8,8,8,8,8,4,
  4,8,8,4,8,8,
  8,8,8,8,8,8,8,8,
  4,8,8,4,8,8,
  //////LINEA 10 DE LA PARTITURA :3
  8,8,8,8,8,8,4,
  8,8,8,8,8,8,8,8,
  8,8,8,8,8,4,8,
  8,16,8,8,8,8,8,8,
  ///LINEA 14
  4,4,4,4,
  4,8,8,4,8,8,
  4,8,8,8,8,8,
  4,8,4,8,
  4,4,8,8,4,
  4,8,8,4,8,8,
  ///LINEA 20
  8,8,8,8,8,8,8,8,
  4,8,8,4,8,8,
  8,8,8,8,8,8,4,
  4,8,8,4,8,8,
  8,8,8,8,8,8,8,8,
  ///LINEA 25
  4,8,8,4,8,8,
  8,8,8,8,8,4,
  8,16,8,8,8,8,8,8,
  8,8,8,8,8,4,8,
  ////LINEA 29
  8,16,8,8,8,8,8,8,
  4,4,4,4,
  4,8,8,4,8,8,
  4,8,8,8,8,8,
  4,8,4,8,
  ////LINEA 34
  4,4,8,8,4,
  4,4,4,8,8,8,8,8,8,8,8,
  4,4,4,8,8,8,8,8,8,8,8,
  ///LINEA 37
  4,4,4,8,8,8,8,8,8,8,8,
  4,4,4,4,4,4,4,4,
  4,4,4,8,8,8,8,8,8,8,8,
  ///LINEA 40
  4,4,4,8,8,8,8,8,8,8,8,
  4,4,4,8,8,8,4,8,8,8,
  ///LINEA 42
  4,4,4,4,4,4,4,4,
  4,8,4,8,
  4,8,4,8,
  8,8,4,1,
};

void setup() {
  pinMode(BUZZER_PIN, OUTPUT);
}

void loop() {
  int size = sizeof(durations) / sizeof(int);

  for (int note = 0; note < size; note++) {
    //to calculate the note duration, take one second divided by the note type.
    //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int duration = 1800 / durations[note];
    tone(BUZZER_PIN, melody[note], duration);

    //to distinguish the notes, set a minimum time between them.
    //the note's duration + 30% seems to work well:
    int pauseBetweenNotes = duration * 1;
    delay(pauseBetweenNotes);

    //stop the tone playing:
    noTone(BUZZER_PIN);
  }
  delay(5000);
}
